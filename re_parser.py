import re
import pprint

def parse_budget_codes(text_input: str | list) -> list[dict[str, str]]:
    """
    Извлекает коды и наименования из текста, ИСКЛЮЧАЯ опциональный
    трехзначный префикс '000' из итогового кода.

    Args:
        text_input: Строка или список строк с данными.

    Returns:
        Список словарей, где каждый словарь содержит 'code' и 'name'.
    """
    if isinstance(text_input, list):
        text = "".join(text_input)
    else:
        text = text_input

    # --- ФИНАЛЬНОЕ РЕГУЛЯРНОЕ ВЫРАЖЕНИЕ ---
    #
    # Предыдущий паттерн для кода: ((?:\d{3}\s+)?\d[\d\s]{15,}\d)
    #                               ^-- захватывал всё
    #
    # Новый паттерн для кода: (?:(?:\d{3}\s+)?(\d[\d\s]{15,}\d))
    #                          ^^-- внешняя группа стала НЕзахватывающей
    #                                          ^-- захватывается ТОЛЬКО основная часть кода
    #
    # В результате re.findall будет возвращать в качестве первого элемента
    # кортежа только то, что попало во внутреннюю захватывающую группу.
    pattern = re.compile(
        # Вся конструкция кода теперь в НЕзахватывающей группе (?:...)
        r'(?:(?:\d{3}\s+)?'  # Опциональный префикс '000 ' (не захватывается)
        r'(\d[\d\s]{15,}\d))'  # Основная часть кода (ЗАХВАТЫВАЕТСЯ)
        r'\s+'  # Пробелы между кодом и наименованием
        r'([А-Яа-яЁё(].*?)'  # Наименование (ЗАХВАТЫВАЕТСЯ)
        # Взгляд вперед также обновлен
        r'(?=(?:\d{3}\s+)?\d[\d\s]{15,}\d|\Z)',
        re.DOTALL
    )

    matches = pattern.findall(text)

    result_list = []
    # findall теперь возвращает кортежи (основной_код, наименование)
    for code, name in matches:
        cleaned_code = ' '.join(code.strip().split())
        cleaned_name = ' '.join(name.strip().split())
        result_list.append({
            "code": cleaned_code,
            "name": cleaned_name
        })

    return result_list

# Используем тот же пример, что и в прошлый раз
input_text_with_zeros = """
Некоторый текст до...
000 000 000 000 000 000 000
Это просто строка с нулями, которую нужно игнорировать.

000 1 09 01030 05 3000 110 Налог на имущество организаций, обладающих
объектами налогообложения, входящими в состав
Единой системы газоснабжения (сумма платежа
(перерасчеты, недоимка и задолженность по
соответствующему платежу, в том числе по
отмененному))

1 01 02010 01 1000 110 Налог на доходы физических лиц (без префикса 000)

Еще какой-то мусорный текст 000 000 000
"""

parsed_data = parse_budget_codes(input_text_with_zeros)
pprint.pprint(parsed_data)